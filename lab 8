from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import MAIN_DISPATCHER, CONFIG_DISPATCHER, set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.controller.handler import HANDSHAKE_DISPATCHER
from ryu.lib.packet import packet, ethernet
from ryu.lib import dpid as dpid_lib
from ryu.app.wsgi import ControllerBase, WSGIApplication, route
import json

# Global name for registering app
simple_switch_instance_name = 'simple_switch_api_app'

class SimpleSwitch13(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]
    _CONTEXTS = { 'wsgi': WSGIApplication }

    def __init__(self, *args, **kwargs):
        super(SimpleSwitch13, self).__init__(*args, **kwargs)
        self.mac_to_port = {}
        wsgi = kwargs['wsgi']
        wsgi.register(SimpleSwitchController, {simple_switch_instance_name: self})

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                          ofproto.OFPCML_NO_BUFFER)]
        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]
        mod = parser.OFPFlowMod(datapath=datapath, priority=0,
                                match=match, instructions=inst)
        datapath.send_msg(mod)

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        in_port = msg.match['in_port']

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocols(ethernet.ethernet)[0]
        dst = eth.dst
        src = eth.src

        dpid = format(datapath.id, '016x')
        self.mac_to_port.setdefault(dpid, {})

        self.mac_to_port[dpid][src] = in_port

        if dst in self.mac_to_port[dpid]:
            out_port = self.mac_to_port[dpid][dst]
        else:
            out_port = ofproto.OFPP_FLOOD

        actions = [parser.OFPActionOutput(out_port)]
        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,
                                  in_port=in_port, actions=actions, data=msg.data)
        datapath.send_msg(out)

    def get_mac_table(self, dpid):
        return self.mac_to_port.get(dpid, {})

    def set_mac_to_port(self, dpid, entry):
        self.mac_to_port.setdefault(dpid, {})
        self.mac_to_port[dpid][entry['mac']] = entry['port']

    def del_mac_table_entry(self, dpid, entry):
        if dpid in self.mac_to_port and entry['port'] in self.mac_to_port[dpid].values():
            to_del = [mac for mac, port in self.mac_to_port[dpid].items() if port == entry['port']]
            for mac in to_del:
                del self.mac_to_port[dpid][mac]

class SimpleSwitchController(ControllerBase):
    def __init__(self, req, link, data, **config):
        super(SimpleSwitchController, self).__init__(req, link, data, **config)
        self.simple_switch_app = data[simple_switch_instance_name]

    @route('simpleswitch', '/simpleswitch/mactable/{dpid}', methods=['GET'],
           requirements={'dpid': dpid_lib.DPID_PATTERN})
    def list_mac_table(self, req, **kwargs):
        dpid = kwargs['dpid']
        mac_table = self.simple_switch_app.get_mac_table(dpid)
        body = json.dumps(mac_table)
        return Response(content_type='application/json', body=body)

    @route('simpleswitch', '/simpleswitch/mactable/{dpid}', methods=['PUT'],
           requirements={'dpid': dpid_lib.DPID_PATTERN})
    def put_mac_table(self, req, **kwargs):
        dpid = kwargs['dpid']
        try:
            new_entry = eval(req.body)
            self.simple_switch_app.set_mac_to_port(dpid, new_entry)
            return Response(status=200)
        except Exception:
            return Response(status=400)

    @route('simpleswitch', '/simpleswitch/mactable/{dpid}', methods=['DELETE'],
           requirements={'dpid': dpid_lib.DPID_PATTERN})
    def delete_mac_entry(self, req, **kwargs):
        dpid = kwargs['dpid']
        try:
            entry = eval(req.body)
            self.simple_switch_app.del_mac_table_entry(dpid, entry)
            return Response(status=200)
        except Exception:
            return Response(status=400)

from webob import Response




curl -X PUT http://localhost:8080/firewall/module/enable/0000000000000001
curl -X POST -d '{"nw_src": "10.0.0.1/32", "nw_dst": "10.0.0.2/32", "nw_proto": "ICMP", "actions":"ALLOW", "priority":"1"}' http://localhost:8080/firewall/rules/0000000000000001


curl -X POST -d '{"nw_src": "10.0.0.2/32", "nw_dst": "10.0.0.1/32", "nw_proto": "ICMP", "actions":"ALLOW", "priority":"1"}' http://localhost:8080/firewall/rules/0000000000000001


curl -X POST -d '{"nw_src": "10.0.0.1/32", "nw_dst": "10.0.0.4/32", "nw_proto": "ICMP", "actions":"DENY", "priority":"10"}' http://localhost:8080/firewall/rules/0000000000000001
